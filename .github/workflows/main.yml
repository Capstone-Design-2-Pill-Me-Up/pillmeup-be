name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('PillMeUp/build.gradle', 'PillMeUp/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x PillMeUp/gradlew
      - name: Build with Gradle
        run: ./PillMeUp/gradlew build -x test --project-dir PillMeUp

      - name: Create deployment package
        run: |
          mkdir -p deploy
          cp PillMeUp/build/libs/*-SNAPSHOT.jar deploy/app.jar
          cp PillMeUp/appspec.yml deploy/
          cp -r PillMeUp/scripts/ deploy/
          echo "Deployment package prepared."

      - name: Zip deployment package
        run: zip -r deploy.zip ./deploy

      # 4. AWS 인증
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 5. S3에 아티팩트 업로드
      - name: Upload to S3
        # S3_BUCKET으로 변경된 이름 사용
        run: aws s3 cp deploy.zip s3://${{ secrets.S3_BUCKET }}/deploy/${GITHUB_SHA}.zip

      # 6. CodeDeploy 배포 트리거
      - name: Deploy to EC2 via AWS CodeDeploy
        run: aws deploy create-deployment --application-name ${{ secrets.CODE_DEPLOY_APPLICATION_NAME }} --deployment-group-name ${{ secrets.CODE_DEPLOY_DEPLOYMENT_GROUP }} --s3-location bucket=${{ secrets.S3_BUCKET }},key=deploy/${GITHUB_SHA}.zip,bundleType=zip